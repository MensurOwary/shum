macro GEN_SIZE = 100 end
macro PATTERNS = [0 1 1 1 0 1 1 0] end

let curr:list
GEN_SIZE emptyListOfSize curr!
curr@ curr@ size 2 - 1 set          // set the penultimate element to 1

let next:list
GEN_SIZE emptyListOfSize next!

let i:int
let a:int
let b:int
let c:int
let ix:int
let temp:list
let j:int

0 i!
loop i@ GEN_SIZE < do

    curr@ toStringList

    1 j!

    loop j@ GEN_SIZE decr < do
        curr@ j@ decr   get a!
        curr@ j@        get b!
        curr@ j@ incr   get c!

        a@ 2 <<
        b@ 1 << |
        c@      | ix!

        next@ j@ PATTERNS ix@ get set

        j@ incr j!
    end

    curr@ temp!
    next@ curr!
    temp@ next!

    i@ incr i!
end

func emptyListOfSize int -> list =
    let length:int
    length!

    let arr:list
    [] arr!

    let i:int
    0 i!

    loop i@ length@ < do
        arr@ 0 append
        i@ incr i!
    end

    arr@ return
end

func toStringList list -> =
    let array:list
    array!

    let count:int
    array@ size count!

    let i:int
    0 i!

    loop i@ count@ < do
        array@ i@ get toInt

        0 == if " "
        else "*"
        end

        puts
        i@ incr i!
    end
    "" print
end